{"version":3,"file":"static/js/966.e6cdddfa.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","redux/selectors.js","components/Contacts/Contacts.jsx","components/Form/Form.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","components/Wrapper/Wrapper.styled.jsx","components/Wrapper/Wrapper.jsx","components/Loader/Loader.js","components/UserCreate/UserContacts/UserContactsForm.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const H2 = styled.h2`\n    font-size:30px;\n   margin: 10px 0 0  10px; \n`\nexport const UL = styled.ul`\nwidth: 96%;\n    margin: 10px 0px 10px;\n    padding:0;\n`\nexport const LI = styled.li`\n    display: flex;\n    justify-content: space-between;\n    font-size:20px;\n    margin-bottom:8px;\n`","export const addNewContacts = state => {\n  return state.contacts.items;\n};\nexport const isLoadingContacts = state => {\n  return state.contacts.isLoading;\n};\nexport const errorContacts = state => {\n  return state.contacts.error;\n};\n\nexport const getFilteredContacts = state => {\n  return state.filter;\n};\n","import { LI, H2, UL } from \"./Contacts.styled\"\nimport { deleteContacts } from \"redux/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNewContacts, getFilteredContacts } from \"redux/selectors\";\n//Coздаем функцию фильтрации за компонентом\n//исключаем рендер\n  const filterContacts = (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return items.filter(contact=>\n       contact.name.toLowerCase().includes(normalizedFilter))\n  }\n\nexport default function Contacts() {\n    const items = useSelector(addNewContacts);\n    const filter = useSelector(getFilteredContacts);\n    const filteredItems = filterContacts(items, filter);\n\n    const dispatch = useDispatch();\n        const deleteContact = uniqueId => {\n    // console.log(\"🚀  uniqueId\", uniqueId);\n        dispatch(deleteContacts(uniqueId));\n    }\n    return (\n        <>\n            <H2>Contacts</H2>\n            <UL>\n            {filteredItems.map(({id,name,number}) => (\n                <LI key={id}>{name} : {number}\n                    <div>\n                        <button \n                            type=\"button\"\n                            onClick={() => {deleteContact(id) }}\n                            //передача id в метод для удаления обьекта\n                        >DELETE</button> \n                    </div>\n                </LI>    \n            ))}\n            </UL>\n        </>\n    )\n}\n","import styled from \"styled-components\";\n export const FormContainer = styled.div`\n    max-width: 320px;\n    outline: groove;\n    padding: 10px;\n    margin-bottom:10px;\n `\nexport const Forma = styled.form`\n    display: flex;\n    flex-direction:column;\n    `\n    export const Label = styled.label`\n        font-size:18px;\n     `\nexport const Input = styled.input`\n    padding: 6px;\n `","import styled from \"styled-components\";\nexport const Input = styled.input`\n    padding: 6px;\n    max-width: 320px;\n `\n","import { Label } from \"components/Form/Form.styled\"\nimport { Input } from \"./Filter.styled\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFilteredContacts } from \"../../redux/selectors\";\nimport { filterContactsAction } from \"../../redux/filter.slice\";\n\nexport default function Filter() {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilteredContacts);\n\n    const chooseFilterContact = (evt) => {\n        dispatch(filterContactsAction(evt.target.value ));\n  }\n    return (\n        <>\n        <Label>Find contacts by name</Label>\n        <Input\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -]\n            [a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"May contain only letters\"\n            value={filter}\n            onChange={chooseFilterContact}\n            required />\n        </>\n    )\n}","import { FormContainer,Forma,Input,Label } from './Form.styled'\nimport { useState } from 'react'\nimport { addNewContacts } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/operations';\n\nexport default function Form() {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const items = useSelector(addNewContacts);\n\n    const inputAddedName = evt => {\n        const { name, value } = evt.target;\n        if (name === 'name') {\n            setName(value);\n        } else if (name === 'number') {\n            setNumber(value);\n        }\n    };\n\n    const onSubmitForm = evt => {\n        evt.preventDefault();\n        const newContact = {name: name,number: number};\n            if (items.length === 0) {\n                dispatch(addContacts(newContact));\n                resetForm();\n        return;\n        } else {\n        const existingContacts = \n        items.findIndex(itemContacts =>\n            newContact.name === itemContacts.name) !==-1;\n            // Проверка если контакт уже есть\n            // console.log(\"🚀  existingContacts\", existingContacts);\n        if(existingContacts){\n        alert(`${newContact.name} is already in contacts.`)\n        return;\n        }\n            dispatch(addContacts(newContact));\n            resetForm();\n        }\n    };\n\n    const resetForm = () => {\n        setName('');setNumber('');\n    };\n\n    return (\n        <FormContainer>\n            <Forma onSubmit={onSubmitForm}>\n                <Label>Name</Label>\n                <Input\n                    autoComplete=\"off\"\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"May contain only letters\"\n                    value={name}\n                    onChange={inputAddedName}\n                    required />\n                <br />\n                <Label>Number</Label>\n                <Input\n                    autoComplete=\"off\"\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"May contain only number\"\n                    value={number}\n                    onChange={inputAddedName}\n                    required />\n\n                <br />\n                <button type=\"submit\">Add Contact</button>\n            </Forma>\n        </FormContainer>\n    );\n}\n","import styled from \"styled-components\"\nexport const Section = styled.section`\n    display: flex;\n    flex-direction: column;\n    width: 60%;\n    border-radius: 4px;\n    padding: 16px;\n    /* box-shadow: 0px 1px 12px 0px rgba(0,0,0,0.75); */\n    box-shadow: 0px 0px 12px 0px rgba(2, 117, 11, 0.75);\n`\nexport const Title = styled.h1`\nmargin:0 auto 10px;\nfont-size: 36px\n`\n","import { Section, Title } from \"./Wrapper.styled\"\nimport PropTypes from 'prop-types';\nexport default function WrapperForPhonebook({ children }) {\n    return (\n        <Section>\n            <Title>Phonebook</Title>\n            {children}\n        </Section > \n    )\n}\nWrapperForPhonebook.propTypes = {\n    children: PropTypes.node.isRequired,\n}","import { ProgressBar } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <ProgressBar\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"progress-bar-loading\"\n      wrapperClass=\"progress-bar-wrapper\"\n      borderColor=\"#F4442E\"\n      barColor=\"#51E5FF\"\n    />\n  );\n};\n","import { Container } from \"../../App.styled\";\nimport Contacts from \"components/Contacts\";\nimport Filter from \"components/Filter\";\nimport Form from \"components/Form\";\nimport WrapperForPhonebook from \"components/Wrapper/Wrapper\";\nimport { STATUS } from \"../../Status/costants.status\";\nimport { addNewContacts, isLoadingContacts } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from \"components/Loader/Loader\";\nimport { getContacts } from \"redux/operations\";\nimport { useEffect } from \"react\";\n\nconst UserContactsForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(addNewContacts);\n  const isLoading = useSelector(isLoadingContacts);\n  \n    useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n  \n    return (\n            <Container>\n        <WrapperForPhonebook>\n        <Form/> \n          {isLoading === STATUS.loading ||\n            isLoading === STATUS.idle ?\n            <Loader /> : \"\"}\n            {items.length === 0 ? '' :\n              <>\n            <Filter />\n            <Contacts/>\n              </> }\n        </WrapperForPhonebook>\n    </Container>\n    )\n}\nexport default UserContactsForm;"],"names":["H2","styled","_templateObject","_taggedTemplateLiteral","UL","_templateObject2","LI","_templateObject3","addNewContacts","state","contacts","items","isLoadingContacts","isLoading","getFilteredContacts","filter","filterContacts","normalizedFilter","toLowerCase","contact","name","includes","Contacts","useSelector","filteredItems","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","map","_ref","id","number","type","onClick","uniqueId","deleteContacts","FormContainer","Forma","Label","Input","_templateObject4","Filter","autoComplete","pattern","title","value","onChange","evt","filterContactsAction","target","required","Form","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","inputAddedName","_evt$target","resetForm","onSubmit","preventDefault","newContact","length","addContacts","findIndex","itemContacts","alert","concat","Section","Title","WrapperForPhonebook","Loader","ProgressBar","height","width","ariaLabel","wrapperClass","borderColor","barColor","useEffect","getContacts","Container","STATUS"],"sourceRoot":""}